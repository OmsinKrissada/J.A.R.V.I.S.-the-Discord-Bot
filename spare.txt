function rank(origin_message) {
    let stopranking = false;
    const { spawn } = require("child_process");

    const py = spawn("python", ["-u", "item-ranker.py"]);

    py.stdout.on("data", data => {
        sendEmbed('stdout: ', `${data}`)
        console.log(`stdout: ${data}`);
    });

    py.stderr.on("data", data => {
        console.log(`stderr: ${data}`);
    });

    py.on('error', (error) => {
        console.log(`error: ${error.message}`);
    });

    py.on("close", code => {
        console.log(`child process exited with code ${code}`);
        pass.destroy()
        stopranking = true
    });

    // console.log(`going to pipe as ${process.stdin.read()}`)
    // process.stdin.pipe(py.stdin)
    // console.log(`piped as ${process.stdin.read()}`)
    // console.log('piped')

    // rl.question("input: ", function (ans) {
    // 	process.stdin.pipe(ls.stdin)
    // 	// ls.stdin.write(ans)
    // });

    const { Readable, Writable, PassThrough } = require('stream')
    // process.stdin.pipe(py.stdin)
    const pass = new PassThrough();
    const writable = new Writable();
    // const pass = PassThrough.from(message.content)

    // pass.on('readable', () => {
    // 	pass.pipe(py.stdin)
    // 	pass.unpipe(py.stdin)
    // })
    pass.pipe(py.stdin)
    // process.stdin.pipe(py.stdin)
    pass.on('data', data => {
        console.log(`data: ${data}`)
    })
    // process.stdout.on()



    // process.stdin.on('data', data => {
    // 	console.log(data)
    // })

    pass.on('data', data => {
        console.log(data)
    })

    client.on('message', message => {
        if (stopranking) {
            return;
        }
        if (!message.author.bot) {

            console.log('wrote')

            pass.write(message.content + '\r\n')
        }
    })
}