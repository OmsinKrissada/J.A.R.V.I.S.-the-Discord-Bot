import { Emoji, GuildEmoji, Message, MessageEmbed, PartialMessage, ReactionEmoji, TextChannel } from 'discord.js';
import { Command } from '../CommandManager';
import { rolePanel } from '../DBManager';
import * as Helper from '../Helper';
import { bot } from '../Main';


new Command({
	name: 'roleselector',
	category: 'features',
	description: 'Manages role selectors',
	examples: [],
	requiredCallerPermissions: ['MANAGE_ROLES', 'MANAGE_GUILD'],
	requiredSelfPermissions: ['SEND_MESSAGES', 'MANAGE_ROLES', "EMBED_LINKS", "VIEW_CHANNEL", "ADD_REACTIONS", "READ_MESSAGE_HISTORY"],
	serverOnly: true,
	async exec(message, prefix, args, sourceID) {
		const action = args[0];
		switch (action) {
			case 'create': {
				const channel = message.channel;
				const issuer = message.author;
				let title: string;
				const embed = new MessageEmbed({
					title: 'Role Selector Creation',
					description: 'Enter category for this role selector',
					// description: 'Enter your description',
					color: Helper.AQUA,
					footer: { text: 'Delete this message to cancel the creation progress' }
				});
				const editor = await message.channel.send(embed)

				// cancel operation on delete
				// const listener = (msg: Message | PartialMessage) => {
				// 	console.log('checking deleted msg')
				// 	if (msg.id == panel.id) {
				// 		bot.removeListener('messageDelete', listener)
				// 	}
				// }
				// 
				// bot.on('messageDelete', listener)

				await channel.awaitMessages(msg => msg.author.id == issuer.id, { maxProcessed: 1 }).then(collected => {
					const msg = collected.first();
					title = msg.content;
					msg.delete();
				});

				embed.setDescription('React this message with reactions you want for roles, type "done" to mark as finish.')
				editor.edit(embed)
				await channel.awaitMessages(msg => msg.author.id == issuer.id && msg.content.toLowerCase() == 'done', { maxProcessed: 1 }).then(collected => { collected.first().delete() });

				let rolestr = '';
				const roles: { emoji: GuildEmoji | ReactionEmoji; roleId: string; }[] = [];
				for (const reaction of editor.reactions.cache.values()) {
					embed.setDescription(`Enter role id for "${reaction.emoji}"`);
					editor.edit(embed);
					await channel.awaitMessages(msg => msg.author.id == issuer.id, { maxProcessed: 1 }).then(collected => {
						// console.log(collected)
						const msg = collected.first();
						const resolvedRole = message.guild.roles.resolve(msg.content);
						if (resolvedRole) {
							roles.push({ emoji: reaction.emoji, roleId: msg.content });
							rolestr += `${reaction.emoji}  :  ${resolvedRole}\n\n`;
						}

						msg.delete();
					})
				}

				embed.setDescription('Enter channel id to send the selector into.')
				editor.edit(embed)
				await channel.awaitMessages(msg => msg.author.id == issuer.id, { maxProcessed: 1 }).then(async (collected) => {
					const msg = collected.first();

					const targetChannel = message.guild.channels.resolve(msg.content);
					if (targetChannel instanceof TextChannel) {
						const panel = await targetChannel.send(new MessageEmbed({
							title: `Category: ${title}`,
							description: 'React reactions below to give yourself a role.\n\n\n' + rolestr,
							color: Helper.AQUA,
						}));
						roles.forEach(role => {
							panel.react(role.emoji)
						})

						// apply to database
						const panels = (await DataManager.get(sourceID)).rolePanels;
						panels.set(panel.id, {
							messageId: panel.id,
							roles: roles.map(role => { return { emojiId: role.emoji.identifier, roleId: role.roleId } })
						});
						console.log(panels);
						(await DataManager.set(sourceID, 'rolePanels', panels));
					}

					msg.delete();
				});

				embed.setDescription('Done.')
				editor.edit(embed)
				// (await DataManager.get(sourceID)).rolePanels.push

			}
				break;
		}
	}
});

bot.once('ready', () => {
	bot.guilds.cache.forEach(async (guild) => {
		Array.from((await DataManager.get(guild.id)).rolePanels.keys())
			.map(msgId => guild.channels.cache.filter(textchannels => textchannels.type == 'text').forEach((channel: TextChannel) => channel.messages.fetch(msgId)
				.catch(_ => { })))
	});
});

bot.on('messageReactionAdd', async (reaction, user) => {
	const message = reaction.message;
	const guild = message.guild;

	if (!guild || user.id == bot.user.id) return;
	//arcterus
	const panels = (await DataManager.get(guild.id)).rolePanels;
	const panel = panels.get(reaction.message.id);
	if (panel) {
		const role = panel.roles.filter(role => role.emojiId == reaction.emoji.identifier)[0];
		if (role) {
			guild.member(user.id).roles.add(role.roleId);
		} else {
			reaction.remove();
		}
	}
});

bot.on('messageReactionRemove', async (reaction, user) => {
	const message = reaction.message;
	const guild = message.guild;

	if (!guild || user.id == bot.user.id) return;

	const panels = (await DataManager.get(guild.id)).rolePanels;
	const panel = panels.get(reaction.message.id);
	if (panel) {
		const role = panel.roles.filter(role => role.emojiId == reaction.emoji.identifier)[0];
		if (role) {
			guild.member(user.id).roles.remove(role.roleId);
		}
	}
})